# This file

You should only work within this quarto file, so don't make a new script. Try clicking on the button above that says "Visual". You might like that view of the file more. On canvas, you simply submit this .qmd file. Save your file regularly while working on it :)

# Assignment description

Next to the R questions (8 points), you should complete EITHER the advanced R questions OR the python questions (2 points, respectively). This week's assignment is worth 10% of your final course grade. If questions from both sections are (partially) filled in, only the advanced R questions will be graded. Instead of copying solutions from your classmates or using AI coding assistants, please post lots of questions on Slack or message the TAs.

## Q0; Example task + solution

Make a string variable and print its content. Click on the arrow inside the code block to run the code.

```{r}
#Solution (~2 lines of code)
my_string <- "This is my string"
print(my_string)
```

# R questions

Final tip: If you edit this file in "Source" mode instead of "Visual" (see buttons above) DON'T WRITE ANYTHING BEHIND EACH BLOCK's CLOSING TICKS \`\`\`. It will lead to a weird error. Also don't make new code blocks. GOOD LUCK!

#R1

Run a function from the lecture to find out your current working directory. As an example, the teacher's current working directory is \[1\] "C:/Users/Teacher/Desktop/R_course/week1".

```{r}
#WRITE YOUR CODE INTO THIS CELL (~1 line of code below this comment)

```

#R2

Go into your file folders and make a new folder called r_course, with a subfolder called week_1 (you don't need to write any code, just do it the usual way). If you already have a folder for this course, just rename it. Next, use code to set your working directory to the new folder.

```{r}
#WRITE YOUR CODE INTO THIS CELL (~1 line of code)

```

#R3

Save this .qmd file into that folder. Then, write a line of code that uses the list.files function. Additionally, write a line of code that tells you helpful details about the list.files function.

```{r}
#WRITE YOUR CODE INTO THIS CELL (~2 lines of code)

```

#R4

Create a variable called hours_sleep and assign it the number 5. Then create a variable called reported_happiness and assign it the value '3'. Can you add the two variables? Why or why not?

```{r}
#WRITE YOUR CODE INTO THIS CELL (~3 lines of code + 1 comment)

```

#R5

What happens in the two lines of code below? How many objects are in your workspace afterwards?

```{r}
#WRITE YOUR CODE INTO THIS CELL (~2 new lines of comments)
rm(list = ls())
a <- b <- ab <- ba <- c <- 1
```

#R6

Create a variable called classic_string which contains the following sentence: “Hello world.” Return the same string by writing the variable name without an assignment. Also try the print() function.

```{r}
#WRITE YOUR CODE INTO THIS CELL (~3 lines of code)

```

#R7

Define a vector with elements 2, FALSE, -1.243, and "test" in that order. What is the datatype of the different elements after being put into the vector?

```{r}
#WRITE YOUR CODE INTO THIS CELL (~1 line of code + 1 comment)

```

#R8

The code below gives NA, why? Can you compute the mean with the missing value removed? Hint: help files of mean function

```{r}
#WRITE YOUR CODE INTO THIS CELL (change SECOND line of code)
participant_ages <- c(21,26,27,19,49,NA)
mean(participant_ages)
```

#R9

Type ?fortune into the R Console (so not into this qmd file). You probably get an error saying “No documentation for ‘fortune’ in specified packages and libraries”. But according to the internet (https://cran.r-project.org/web/packages/fortunes/fortunes.pdf) this function DOES exists. Get access to the fortune function and use it by inputting your birth-month.

```{r}
#WRITE YOUR CODE INTO THIS CELL (~3 lines of code)

```

#R10

A programmer got completely confused and now their code below returns something weird. Which forbidden mathematical operation is done here?

```{r}
#WRITE YOUR CODE INTO THIS CELL (1 line of comments)
birthday_guests <- 8
cake_slices <- 5
my_bool <- birthday_guests < cake_slices
cake_slices / my_bool

```

#R11

Make a sorted vector of 100 student grades. Use indexing to return the 1st, the 20th, and 80th element of the vector.

```{r}
#WRITE YOUR CODE INTO THIS CELL (~2 lines of code)

```

#R12

Write a code to figure out how many letters there are in the alphabet. tip: ?LETTERS

```{r}
#WRITE YOUR CODE INTO THIS CELL (~1 line of code)

```

#R13

Which of these code lines does not work like the others?

```{r}
#WRITE YOUR CODE INTO THIS CELL (~1 line of comments)
letters2 = letters
letters2 == letters
letters2 <- letters
letters -> letters2
```

#R14

It seems like someone messed with my keyboard. Whenever I wanted to type "a" it produced "." Use a basic function to switch these typos back to the correct symbol. You might get a strange result at first, google around to find the solution.

```{r}
#WRITE YOUR CODE INTO THIS CELL (edit second line)
fruits <- c("b.n.n.s",".pples")
```

#R15

Print the mean of this vector. Warnings are okay, if you understand them.

```{r}
#WRITE YOUR CODE INTO THIS CELL (~1-2 lines of code; don't edit first line)
horrible_numbers <- factor(c("25", pi, "NA", 1))
```

#R16

Write R code to compute the following. Given a triangle with sides a=4, b=5, and the angle 70 degrees between a and b, write R code to compute the length of the third side c. Hint: Look up the "Law of cosines"

```{r}
#WRITE YOUR CODE INTO THIS CELL (~4 lines of code)

```

#R17

What is the product of the first 50 odd positive integers (1,3,5,...)? Don't type out all the numbers.

```{r}
#WRITE YOUR CODE INTO THIS CELL (~2 lines of code) 

```

#R18

Often, researcher simulate data to make sure their planned data analysis will work with real participants. Make a matrix with a random number of rows and columns. Fill the matrix with missing values. Then use a single function to show the dimensions of the generated matrix. For the sake of reproducibility, make sure your script produces the same matrix each time.

```{r}
#WRITE YOUR CODE INTO THIS CELL (~3-5 lines of code)

```

#R19

Now, we want 1325 subjects in the rows and 201 variables in columns. Which of the four matrix definitions is incorrect? What does this tell you about the use of function arguments in R?

```{r}
#WRITE YOUR CODE INTO THIS CELL (~1-2 lines of comments)
set.seed(1234)
n_subjects <- 1325
n_vars <- 201
EEGData1 <- matrix(runif(n_subjects*n_vars), ncol=n_vars, nrow=n_subjects)
EEGData2 <- matrix(runif(n_subjects*n_vars), n_subjects, n_vars)
EEGData3 <- matrix(runif(n_subjects*n_vars), n_vars, n_subjects)
EEGData4 <- matrix(ncol=n_vars, nrow=n_subjects, data=runif(n_subjects*n_vars))
```

#R20

We have twenty participants answering twenty IQ questions. We want to compute the number of correct responses per participant. Unfortunately, the code below returns only one number (instead of a number for each participant). How can we fix this issue? Hint: check help for sum()

```{r}
#WRITE YOUR CODE INTO THIS CELL (edit 1 line of code)
set.seed(1234)
rows <- 20 -> cols 
M <- matrix(sample(c(T, F), rows*cols, replace = T), rows, cols)
sum(M) 
```

#R21

Write R code to generate a `2x2x2` array filled with animal names (e.g., "lion", "whale)". Use `dimnames` to label the rows (cuteness levels), columns (habitats), and slices (diet type).

```{r}
#WRITE YOUR CODE INTO THIS CELL (~1 long line of code)

```

#R22

The generated “love_hate_matrix” depicts the relationship between Harry Potter characters. "L" means that the character in the row loves the character in the column.

Use position-based indexing to fill in the missing relationship between Ron and Hermione. Use name-based indexing to fill in the missing relationship between Snape and Harry.

```{r}
#WRITE YOUR CODE INTO THIS CELL (~2 new lines of code)
relationship_matrix <- matrix(c("", "L", "L", "H", "H", "L", "", "L", "H", "H", "L", NA, "", "H", "H","H", "H", "H", "", "L", NA, "H", "H", "L", ""), nrow = 5, byrow = TRUE)
rownames(relationship_matrix) <- c("Harry", "Hermione", "Ron", "Draco", "Snape")
colnames(relationship_matrix) <- c("Harry", "Hermione", "Ron", "Draco", "Snape")

```

#R23

Below I tried to turn the diagonal elements of the love-hate matrix into missing values. However, it doesn't seem to work. Can you fix the code?

```{r}
#WRITE YOUR CODE INTO THIS CELL (edit only last two lines of code)
relationship_matrix <- matrix(c("", "L", "L", "H", "H", "L", "", "L", "H", "H",
    "L", "L", "", "H", "H","H", "H", "H", "", "L", "complicated", "H", "H", "L",""), 
    nrow = 5, byrow = TRUE)
rownames(relationship_matrix) <- c("Harry", "Hermione", "Ron", "Draco", "Snape")
colnames(relationship_matrix) <- c("Harry", "Hermione", "Ron", "Draco", "Snape")

my_diag <- diag(relationship_matrix)
relationship_matrix[my_diag] <- NA
```

#R24

I want to make the vector with a length of 8 in the following order: "a", "a", "b", "b", "c", "c", "d", "d" I want to use the rep function but rep(letters\[1:5\],2) does not work. Provide the improved version using only the function rep().

```{r}
#WRITE YOUR CODE INTO THIS CELL (~1 line of code)

```

#R25

Create this dataframe of LOTR characters. You can write out all the values in the "Name" column, but find shortcuts for all the other three columns to write the individual values. One shortcut is the rep() function.

| Name    | First_appearance | Morality | Dating_appeal |
|---------|------------------|----------|---------------|
| Gollum  | The Hobbit       | Bad      | 0             |
| Smeagol | The Hobbit       | Good     | 2             |
| Sauron  | The Hobbit       | Bad      | 4             |
| Frodo   | LOTR             | Good     | 6             |
| Shelob  | LOTR             | Bad      | 8             |
| Samwise | LOTR             | Good     | 10            |

```{r}
#WRITE YOUR CODE INTO THIS CELL (~1-6 lines of code)

```

#R26

The following code simulates grades for a hypothetical class. 1) Make a new column called final_grade that is 40% assignment grade and 60% exam grade.

```{r}
#WRITE YOUR CODE INTO THIS CELL (~1 additional line of code)
set.seed(1234)
students <- 50

grades <- data.frame(1:students,matrix(sample(8:20,students*2,TRUE)/2,,2))

names(grades) <- c('student_ID','assignment_average','exam')
```

#R27

Continue working on the grades dataframe from the exercise above. Make a boolean variable that shows whether a student passed the class. In order to pass a class, a student needs to have a final grade of 5.5 or higher as well as an exam grade of 5.5 or higher. Print the IDs of the passing students.

```{r}
#WRITE YOUR CODE INTO THIS CELL (~1-3 lines of code)


```

#R28

In R one can use already available data sets by simply typing their name. Look at the InsectSprays dataset and export it as a .csv file to your working directory. How do you make sure that annoying/redundant row names are NOT included in the file?

```{r g}
#WRITE YOUR CODE INTO THIS CELL (~1 line of code)

```

#R29

Write code that gets a quote from the statquotes package. Then use the cowsay package to have an animal/figure say that quote. Re-running the code should (usually) print a different animal saying a different quote.

```{r}
#WRITE YOUR CODE INTO THIS CELL (~4 lines of code)

```

#R30

1)  Read this dataset into your workspace without downloading the file first: "https://raw.githubusercontent.com/hannesrosenbusch/schiphol_class/master/Kaggle_Dataset_Mental_Disorders.csv"
2)  Make a vector which includes the Exhaustion values of people that have mood swings.
3)  Make another vector with the Exhaustion values of people that don't have mood swings.
4)  Run a t-test to compare the means of these two vectors.

```{r}
#WRITE YOUR CODE INTO THIS CELL (~4 lines of code)

```



#Radv1

Demonstrate any four ways of creating a vector and show how to check a vector's datatype.

```{r}
#WRITE YOUR CODE INTO THIS CELL 

```

#Radv2

Use a built-in dataset to demonstrate the concept of indexing. Show how to select a row, a variable, and a specific cell.

```{r}
#WRITE YOUR CODE INTO THIS CELL 

```

#Radv3

Install a new package and use one of its functions without using the library() function. Look online how to do that.

```{r}
#WRITE YOUR CODE INTO THIS CELL 

```

#Radv4

Simulate two variables and put them in a dataframe together. The first variable should have two values (i.e., a categorical variable like "cat" & "dog"). The second variable should be continuous (e.g., IQ values, or life expectancy) and be higher for one group (on average). Give your variables informative names and make sure your results are realistic and reproducible.

```{r}
#WRITE YOUR CODE INTO THIS CELL 

```

#Radv5

Demonstrate the use of the is.na() function for the purpose of missing value imputation. Use comments to explain what you're doing. You can first MAKE some missing values if your chosen dataset doesn't have any.

```{r}
#WRITE YOUR CODE INTO THIS CELL 

```

#Radv6

Make a list with named elements. State in one short comment why a list is more useful than a vector for your chosen context.

```{r}
#WRITE YOUR CODE INTO THIS CELL 

```

#Radv7

Find an interesting discussion about an R topic on the websites stackoverflow or stackexchange. Put the link to the discussion in a comment and write a short sentence about why you find it interesting.

```{r}
#WRITE YOUR COMMENT INTO THIS CELL 

```

#Radv8

Read a dataset directly from a URL and make a plot/visualization (preview of next week's topic).

```{r}
#WRITE YOUR CODE INTO THIS CELL 

```

#Python1

This Python code should run without errors. What would be an equivalent to the int() function if we had to translate it into R?

```{python}
#WRITE YOUR CODE INTO THIS CELL (~1 line of comments)
first_number = 5
second_number = "6"
first_number + int(second_number)

```

#Python2

In R, we use an R function to install packages, specifically install.packages(). In Python, we use a Bash command for that purpose (notice it says bash instead of python in the following code block). Write the bash commands to install the numpy and the pandas packages. You need to have pip installed on your computer.

```{bash}
##WRITE YOUR BASH COMMANDS INTO THIS CELL (~1-2 lines of code)

```

#Python3

This code block should give the error "NameError: name 'np' is not defined". What line of code should you add before to make it work?

```{python}
#WRITE YOUR CODE INTO THIS CELL (add ~1 line above code)

another_array = np.zeros((2, 4, 6))
```

#Python4

What went wrong in this code? How is this different from R? How can we make a true new copy of the numpy array?

```{python}
#WRITE YOUR CODE INTO THIS CELL (edit 1 line of code)
another_array = np.zeros((2, 4, 6))
new_array = another_array
new_array[1, 2, 2] = 1
print(another_array[1, 2, 2])
```

#Python5

This returns nan, why? Can you compute the mean with the missing value removed?

```{python}
#WRITE YOUR CODE INTO THIS CELL (edit SECOND line of code)
sample_scores = np.array([1, 6, 7, 8, 9, np.nan])
print(np.mean(sample_scores))
```

#Python6

Make a 3 dimensional array of 4 by 3 by 5 with all elements being zero.

```{python}
#WRITE YOUR CODE INTO THIS CELL (~1 line of code)

```

#Python7

What is the product of the first 50 odd positive integers (1,3,5,...)? Don't type out all the numbers. (Tip: np.arange)
If your computer breaks, write this in a comment and try it with fewer numbers.

```{python}
#WRITE YOUR CODE INTO THIS CELL (~2 lines of code)

```

#Python8

Do the same as you did for Q25 (the LOTR question in the R part). Obviously, you should use Python code instead of R code. Notice that R has dataframes built-in, whereas Python needs the pandas package.

Create this dataframe of LOTR characters. You can write out all the values in the "Name" column, but find shortcuts for all the other three columns to write the individual values.

| Name    | First_appearance | Morality | Dating_appeal |
|---------|------------------|----------|---------------|
| Gollum  | The Hobbit       | Bad      | 0             |
| Smeagol | The Hobbit       | Good     | 2             |
| Sauron  | The Hobbit       | Bad      | 4             |
| Frodo   | LOTR             | Good     | 6             |
| Shelob  | LOTR             | Bad      | 8             |
| Samwise | LOTR             | Good     | 10            |

```{python}
#WRITE YOUR CODE INTO THIS CELL (~1-6 lines of code)
import pandas as pd

```

#Python9

Print one string which combines all the filenames in your current working directory. If you have less than three files in your working directory, make some additional/empty files first.

```{python}
#WRITE YOUR CODE INTO THIS CELL (~1-2 lines of code)

```

#Python10

Make a dictionary called my_measurements. The first element of the dictionary should be called my_mood_measurements and be a list of 365 string values (either "happy" or "sad" for each day of the year). The second element of the dictionary should be called my_iq_measurements and be a list of 52 normally distributed IQ values. Check numpy's random module for simulating data.

```{python}
#WRITE YOUR CODE INTO THIS CELL (~1-5 lines of code)

```
